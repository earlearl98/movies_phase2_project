{"ast":null,"code":"var _jsxFileName = \"/home/earl/Development/code/phase2/movies_phase2_project/src/components/MovieList.js\",\n  _s = $RefreshSig$();\nimport Movie from './Movie';\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MovieList.css';\nimport Swal from \"sweetalert2\";\nimport '../styles/Movie.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieList() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // Fetch movies data from API and store it in the state variable \"movies\"\n\n  function removeMovie(id) {\n    fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => {\n      Swal.fire({\n        position: \"center\",\n        icon: \"success\",\n        title: \"Movie deleted successfully!\",\n        showConfirmButton: false,\n        timer: 1500\n      });\n    });\n  }\n  useEffect(() => {\n    setIsLoading(true);\n    fetch('https://movies-app-4lwq.onrender.com/movies').then(response => response.json()) // Parse the JSON response\n    .then(data => {\n      setMovies(data);\n      setIsLoading(false);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []); // The empty dependency array ensures the effect runs once after the initial render\n\n  const newArray = [];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MovieList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-container d-flex gap-3\",\n      children: [movies.map(movie => {\n        const {\n          id,\n          title,\n          overview\n        } = movie;\n        console.log(newArray);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Movie, {\n              movie: movie,\n              moviesId: movie.id,\n              setMovieFav: setMovieFav\n            }, movie.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger delete \",\n              type: \"button\",\n              onClick: () => removeMovie(movie.id),\n              children: \"DELETE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n// import Movie from './Movie';\n// import React, { useState, useEffect } from 'react';\n\n// export default function MovieList() {\n\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading,setIsLoading ] = useState(true)\n//   const [onChange, setOnchange] =useState(false)\n\n//   // Fetch movies data from API and store it in the state variable \"movies\"\n\n//   // function handleOnClick(bt){\n//   //   if (movieFav.filter(el=>el.id===bt.id).length === 0){\n//   //     setMovieFav([...movieFav,bt])\n//   //   }\n//   // }\n\n//   // function removeMovie(id) {\n//   //   setMovies(movies.filter(movie=>movie.id !== id))\n//   //   fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{ \n//   //     method: \"DELETE\",\n//   //     headers:{ \n//   //       \"Content-Type\": \"application/json\"\n//   //     }\n//   //   })\n\n//   // }\n\n//   useEffect(() => { \n//     setIsLoading(true)\n//     fetch('https://movies-app-4lwq.onrender.com/movies')\n//     .then((response) => response.json()) // Parse the JSON response\n//     .then(data => {\n//       setMovies(data);\n\n//       setIsLoading(false)\n//     })\n//     .catch(error => console.error('Error fetching data:', error));\n//   }, [onChange]); // The empty dependency array ensures the effect runs once after the initial render\n\n//   // const newArray=[]\n\n//   if (isLoading){\n//     return <h1>\n//       loading...</h1>\n//   }\n//   return (\n//     <div className='container row mx-auto p-2'>\n\n//       <h1>MovieList</h1>\n\n//       <div className='movie-container col-md-3'>\n\n//       {\n//         movies.length<1 && <p className='alert alert warning'>No movies to display</p>\n//       }\n\n//         {\n//         movies && movies.map((movie)=> {\n//           <Movie  key={movie.id} movie={movie}\n//                 onChange={onChange} setOnchange={setOnchange} /> \n//         })\n//       }\n\n//       </div>  \n\n//   </div>\n//   );\n//         }\n_s(MovieList, \"VemDi+XbOfxqdTTlSh/vZkCbPfg=\");\n_c = MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["Movie","React","useState","useEffect","Swal","jsxDEV","_jsxDEV","MovieList","_s","movies","setMovies","isLoading","setIsLoading","removeMovie","id","fetch","method","headers","then","response","json","data","fire","position","icon","title","showConfirmButton","timer","catch","error","console","newArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","movie","overview","log","moviesId","setMovieFav","type","onClick","_c","$RefreshReg$"],"sources":["/home/earl/Development/code/phase2/movies_phase2_project/src/components/MovieList.js"],"sourcesContent":["import Movie from './Movie';\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MovieList.css';\nimport Swal from \"sweetalert2\"\nimport '../styles/Movie.css';\n\n\nexport default function MovieList() {\n  const [movies, setMovies] = useState([]);\n\n\n  const [isLoading,setIsLoading ] = useState(true)\n  // Fetch movies data from API and store it in the state variable \"movies\"\n  \n\n\n  function removeMovie(id) {\n    \n    fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{\n      method: \"DELETE\",\n      headers:{\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(response => response.json())\n    .then(data => {\n      Swal.fire({\n        position: \"center\",\n        icon: \"success\",\n        title: \"Movie deleted successfully!\",\n        showConfirmButton: false,\n        timer: 1500\n      });\n      \n    })\n  }\n\n\n  useEffect(() => {\n    setIsLoading(true)\n    fetch('https://movies-app-4lwq.onrender.com/movies')\n    .then(response => response.json()) // Parse the JSON response\n    .then(data => {\n      setMovies(data);\n    \n      setIsLoading(false)\n    })\n    .catch(error => console.error('Error fetching data:', error));\n  }, []); // The empty dependency array ensures the effect runs once after the initial render\n\n\n  const newArray=[]\n\n\n  if (isLoading){\n    return <h1>\n      loading...</h1>\n  }\n  return (\n    <div className=''>\n      <h1>MovieList</h1>\n\n    \n      <div className='movie-container d-flex gap-3'>\n        {movies.map(movie=> {\n          const {id,title,overview}= movie\n      \n          console.log(newArray);\n          return (\n            <div className=''>\n            \n              <div >\n              <Movie key={movie.id} movie={movie} moviesId={movie.id}\n               setMovieFav={setMovieFav}/>\n              </div>\n\n              \n              <div className=''>\n              <button className='btn btn-danger delete ' type='button' onClick={()=>removeMovie(movie.id)}>DELETE</button>\n              </div>\n\n\n            </div>\n        )\n          })}\n      <div/> \n   \n      </div>\n  </div>\n  );\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import Movie from './Movie';\n// import React, { useState, useEffect } from 'react';\n\n// export default function MovieList() {\n\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading,setIsLoading ] = useState(true)\n//   const [onChange, setOnchange] =useState(false)\n\n//   // Fetch movies data from API and store it in the state variable \"movies\"\n\n//   // function handleOnClick(bt){\n//   //   if (movieFav.filter(el=>el.id===bt.id).length === 0){\n//   //     setMovieFav([...movieFav,bt])\n//   //   }\n//   // }\n\n//   // function removeMovie(id) {\n//   //   setMovies(movies.filter(movie=>movie.id !== id))\n//   //   fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{ \n//   //     method: \"DELETE\",\n//   //     headers:{ \n//   //       \"Content-Type\": \"application/json\"\n//   //     }\n//   //   })\n    \n//   // }\n\n//   useEffect(() => { \n//     setIsLoading(true)\n//     fetch('https://movies-app-4lwq.onrender.com/movies')\n//     .then((response) => response.json()) // Parse the JSON response\n//     .then(data => {\n//       setMovies(data);\n      \n//       setIsLoading(false)\n//     })\n//     .catch(error => console.error('Error fetching data:', error));\n//   }, [onChange]); // The empty dependency array ensures the effect runs once after the initial render\n\n//   // const newArray=[]\n\n//   if (isLoading){\n//     return <h1>\n//       loading...</h1>\n//   }\n//   return (\n//     <div className='container row mx-auto p-2'>\n      \n//       <h1>MovieList</h1>\n\n//       <div className='movie-container col-md-3'>\n\n//       {\n//         movies.length<1 && <p className='alert alert warning'>No movies to display</p>\n//       }\n\n//         {\n//         movies && movies.map((movie)=> {\n//           <Movie  key={movie.id} movie={movie}\n//                 onChange={onChange} setOnchange={setOnchange} /> \n//         })\n//       }\n              \n      \n//       </div>  \n      \n//   </div>\n//   );\n//         }\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}