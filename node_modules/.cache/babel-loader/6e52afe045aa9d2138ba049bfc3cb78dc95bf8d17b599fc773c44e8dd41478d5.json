{"ast":null,"code":"var _jsxFileName = \"/home/earl/Development/code/phase2/movies_phase2_project/src/components/MovieList.js\",\n  _s = $RefreshSig$();\nimport Movie from './Movie';\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MovieList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieList({\n  movieFav,\n  setMovieFav\n}) {\n  _s();\n  const [movies, setMoviesy] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // Fetch movies data from API and store it in the state variable \"movies\"\n  function handleOnClick(bt) {\n    if (movieFav.filter(el => el.id === bt.id).length === 0) {\n      setMovieFav([...movieFav, bt]);\n    }\n  }\n  function removeMovie(id) {\n    setMoviesy(movies.filter(movie => movie.id !== id));\n    fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  useEffect(() => {\n    setIsLoading(true);\n    fetch('https://movies-app-4lwq.onrender.com/movies').then(response => response.json()).then(data => {\n      setMovies(data);\n      setIsLoading(false);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []); // The empty dependency array ensures the effect runs once after the initial render\n\n  const newArray = [];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"MovieList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container row \",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-container col-md-2  p-2\",\n        children: [movies.map(movie => {\n          const {\n            id,\n            title,\n            overview\n          } = movie;\n          console.log(newArray);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-container1 row gap p-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Movie, {\n                movie: movie,\n                moviesId: movie.id,\n                movieFav: movieFav,\n                setMovieFav: setMovieFav\n              }, movie.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => handleOnClick(movie),\n              className: \"card p-1 \",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger \",\n                onClick: () => removeMovie(movie.id),\n                children: \"DELETE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n// import Movie from './Movie';\n// import React, { useState, useEffect } from 'react';\n\n// export default function MovieList() {\n\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading,setIsLoading ] = useState(true)\n//   const [onChange, setOnchange] =useState(false)\n\n//   // Fetch movies data from API and store it in the state variable \"movies\"\n\n//   // function handleOnClick(bt){\n//   //   if (movieFav.filter(el=>el.id===bt.id).length === 0){\n//   //     setMovieFav([...movieFav,bt])\n//   //   }\n//   // }\n\n//   // function removeMovie(id) {\n//   //   setMovies(movies.filter(movie=>movie.id !== id))\n//   //   fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{ \n//   //     method: \"DELETE\",\n//   //     headers:{ \n//   //       \"Content-Type\": \"application/json\"\n//   //     }\n//   //   })\n\n//   // }\n\n//   useEffect(() => { \n//     setIsLoading(true)\n//     fetch('https://movies-app-4lwq.onrender.com/movies')\n//     .then((response) => response.json()) // Parse the JSON response\n//     .then(data => {\n//       setMovies(data);\n\n//       setIsLoading(false)\n//     })\n//     .catch(error => console.error('Error fetching data:', error));\n//   }, [onChange]); // The empty dependency array ensures the effect runs once after the initial render\n\n//   // const newArray=[]\n\n//   if (isLoading){\n//     return <h1>\n//       loading...</h1>\n//   }\n//   return (\n//     <div className='container row mx-auto p-2'>\n\n//       <h1>MovieList</h1>\n\n//       <div className='movie-container col-md-3'>\n\n//       {\n//         movies.length<1 && <p className='alert alert warning'>No movies to display</p>\n//       }\n\n//         {\n//         movies && movies.map((movie)=> {\n//           <Movie  key={movie.id} movie={movie}\n//                 onChange={onChange} setOnchange={setOnchange} /> \n//         })\n//       }\n\n//       </div>  \n\n//   </div>\n//   );\n//         }\n_s(MovieList, \"28/8cr5maJrFpYuwX4Srz7URyRA=\");\n_c = MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["Movie","React","useState","useEffect","jsxDEV","_jsxDEV","MovieList","movieFav","setMovieFav","_s","movies","setMoviesy","isLoading","setIsLoading","handleOnClick","bt","filter","el","id","length","removeMovie","movie","fetch","method","headers","then","response","json","data","setMovies","catch","error","console","newArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","title","overview","log","moviesId","onClick","_c","$RefreshReg$"],"sources":["/home/earl/Development/code/phase2/movies_phase2_project/src/components/MovieList.js"],"sourcesContent":["import Movie from './Movie';\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MovieList.css';\n\n\nexport default function MovieList({movieFav,setMovieFav}) {\n  const [movies, setMoviesy] = useState([]);\n\n\n  const [isLoading,setIsLoading ] = useState(true)\n  // Fetch movies data from API and store it in the state variable \"movies\"\n  function handleOnClick(bt){\n    if (movieFav.filter(el=>el.id===bt.id).length === 0){\n      setMovieFav([...movieFav,bt])\n    }\n  }\n\n\n  function removeMovie(id) {\n    setMoviesy(movies.filter(movie=>movie.id !== id))\n    fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{\n      method: \"DELETE\",\n      headers:{\n        \"Content-Type\": \"application/json\"\n      }\n    })\n  \n  }\n\n\n  useEffect(() => {\n    setIsLoading(true)\n    fetch('https://movies-app-4lwq.onrender.com/movies')\n    .then(response => response.json()) \n    .then(data => {\n\n      setMovies(data);\n    \n      setIsLoading(false)\n    })\n    .catch(error => console.error('Error fetching data:', error));\n  }, []); // The empty dependency array ensures the effect runs once after the initial render\n\n\n  const newArray=[]\n\n\n  if (isLoading){\n    return <h1>\n      loading...</h1>\n  }\n  return (\n    <div className=''>\n      <h1>MovieList</h1>\n\n     <div className='container row '>\n      <div className='movie-container col-md-2  p-2'>\n        {movies.map(movie=> {\n          const {id,title,overview}= movie\n      \n          console.log(newArray);\n          return (\n            <div className='movie-container1 row gap p-3'>\n            \n              <div >\n              <Movie key={movie.id} movie={movie} moviesId={movie.id}\n              movieFav={movieFav} setMovieFav={setMovieFav}/>\n              </div>\n\n              \n              <div onClick={()=>handleOnClick(movie)}  className='card p-1 '>\n              <button className='btn btn-danger 'onClick={()=>removeMovie(movie.id)}>DELETE</button>\n              </div>\n\n\n            </div>\n        )\n          })}\n      <div/> \n      </div>\n      </div>\n  </div>\n  );\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import Movie from './Movie';\n// import React, { useState, useEffect } from 'react';\n\n// export default function MovieList() {\n\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading,setIsLoading ] = useState(true)\n//   const [onChange, setOnchange] =useState(false)\n\n//   // Fetch movies data from API and store it in the state variable \"movies\"\n\n//   // function handleOnClick(bt){\n//   //   if (movieFav.filter(el=>el.id===bt.id).length === 0){\n//   //     setMovieFav([...movieFav,bt])\n//   //   }\n//   // }\n\n//   // function removeMovie(id) {\n//   //   setMovies(movies.filter(movie=>movie.id !== id))\n//   //   fetch(`https://movies-app-4lwq.onrender.com/movies/${id}`,{ \n//   //     method: \"DELETE\",\n//   //     headers:{ \n//   //       \"Content-Type\": \"application/json\"\n//   //     }\n//   //   })\n    \n//   // }\n\n//   useEffect(() => { \n//     setIsLoading(true)\n//     fetch('https://movies-app-4lwq.onrender.com/movies')\n//     .then((response) => response.json()) // Parse the JSON response\n//     .then(data => {\n//       setMovies(data);\n      \n//       setIsLoading(false)\n//     })\n//     .catch(error => console.error('Error fetching data:', error));\n//   }, [onChange]); // The empty dependency array ensures the effect runs once after the initial render\n\n//   // const newArray=[]\n\n//   if (isLoading){\n//     return <h1>\n//       loading...</h1>\n//   }\n//   return (\n//     <div className='container row mx-auto p-2'>\n      \n//       <h1>MovieList</h1>\n\n//       <div className='movie-container col-md-3'>\n\n//       {\n//         movies.length<1 && <p className='alert alert warning'>No movies to display</p>\n//       }\n\n//         {\n//         movies && movies.map((movie)=> {\n//           <Movie  key={movie.id} movie={movie}\n//                 onChange={onChange} setOnchange={setOnchange} /> \n//         })\n//       }\n              \n      \n//       </div>  \n      \n//   </div>\n//   );\n//         }\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}